#!/usr/bin/env python3

try:
  from Tkinter import *
except:
  from tkinter import *

import copy
import time

size = 20

class CellArray:
    def __init__(self, row, col):
      self.__array = []
      self.row = row
      self.col = col
      self.wrap = False

      for r in range(0, row):
          new = []
          self.__array.append(new)
          for y in range(0, col):
              self.__array[r].append(0)

    def step(self):
        cpy = copy.deepcopy(self.__array)

        rows = len(self.__array)
        columns = len(self.__array[0])

        for x in range(0, rows):
            for y in range(0, columns):
                n = self.neighbors(x,y)

                if self.__array[x][y] == 1:
                    if n != 2 and n != 3:
                        cpy[x][y] = 0

                elif self.__array[x][y] == 0:
                    if n == 3:
                        cpy[x][y] = 1
                else:
                    self.__array[x][y] = 0


        self.__array = cpy

    def neighbors(self, r, c):
        rows = len(self.__array)
        columns = len(self.__array[0])

        if r < 0 or r >= rows:
            return 0

        if c < 0 or c >= columns:
            return 0

        count = 0

        for x in range(r-1,r+2):
            for y in range(c-1, c+2):
                if not (r == x and c == y):
                    count += self.isAlive(x, y)

        return count


    def isAlive(self, r, c):
        rows = len(self.__array)
        columns = len(self.__array[0])

        if self.wrap is True:
            if r < 0:
                while r < 0:
                    r += rows

            elif r >= rows:
                while r >= rows:
                    r -= rows

            if c < 0:
                while c < 0:
                    c += columns

            elif c >= columns:
                while c >= columns:
                    c -= columns

        elif self.wrap is False:
            if r < 0 or r >= rows:
                return 0

            elif c < 0 or c >= columns:
                return 0

        return self.__array[r][c]


    def flip(self, r, c):
        val = 0

        if self.__array[r][c] is 0:
            val = 1

        self.__array[r][c] = val

class CellCanvas(Canvas):
    def __init__(self, parent, array):
        self.__array = array

        Canvas.__init__(self, parent, width=self.__array.col*size, height=self.__array.row*size)
        self.bind("<Button-1>", self.click)
        self.pack()

    def display(self):
        for y in range(0, self.__array.row):
            for x in range(0, self.__array.col):
                self.drawRectangle(y, x)

    def drawRectangle(self, y, x):
        rect = (x*size, y*size, (x+1)*size, (y+1)*size)
        if self.__array.isAlive(y, x) is 1:
            self.create_rectangle(rect, outline="black", fill="black")
        else:
            self.create_rectangle(rect, outline="white", fill="white")

    def click(self, event):
        x = int(event.x / size)
        y = int(event.y / size)

        self.__array.flip(y, x)
        self.drawRectangle(y, x)

    def clear(self):
        for x in range(0, self.__array.row):
            for y in range(0, self.__array.col):
                if self.__array.isAlive(x, y) is 1:
                    self.__array.flip(x, y)

    def step(self):
        self.__array.step()


def makeStep(canv):
    canv.step()
    canv.display()

def clear(canv):
    canv.clear()
    canv.display()

def wrap(self):
    self.cells.wrap = not self.cells.wrap

class PyLife():
    def __init__(self):
        self.root = Tk()
        self.root.title("PyLife")
        self.root.resizable(0,0)

        self.canvasFrame = Frame(self.root)
        self.buttonFrame = Frame(self.root)
        self.canvasFrame.grid(row=0, column=0)
        self.buttonFrame.grid(row=1, column=0)

        self.cells = CellArray(20,20)
        self.canvas = CellCanvas(self.canvasFrame, self.cells)
        self.canvas.display()

        self.wrapButton = Button(self.buttonFrame, text="wrap", command=lambda: wrap(self))
        self.stepButton = Button(self.buttonFrame, text="step", command=lambda: makeStep(self.canvas))
        self.clearButton = Button(self.buttonFrame, text="clear", command=lambda: clear(self.canvas))
        self.quitButton = Button(self.buttonFrame, text="quit", command=self.root.quit)

        self.wrapButton.pack()
        self.stepButton.pack()
        self.clearButton.pack()
        self.quitButton.pack()

        self.wrapButton.grid(row=0, column=0)
        self.stepButton.grid(row=0, column=1)
        self.clearButton.grid(row=0, column=2)
        self.quitButton.grid(row=0, column=3)

        self.root.mainloop()

p = PyLife()
